<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1506818697000</longProp>
        <longProp name="ThreadGroup.end_time">1506818697000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - JsonSlurper 1" enabled="false">
          <stringProp name="cacheKey">ed137a26-58c2-4c63-9f42-216f5fc1b369</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def slurper 	= new groovy.json.JsonSlurper();
def obj 		= slurper.parseText(&apos;{ &quot;name&quot;: &quot;John Doe&quot; }&apos;);

log.info obj.name</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - JsonSlurper 2" enabled="false">
          <stringProp name="cacheKey">ed137a26-58c2-4c63-9f42-216f5fc1b369</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">def slurper = new groovy.json.JsonSlurper();

def json = &apos;&apos;&apos;{
	&quot;name&quot;: &quot;Tom&quot;,
	&quot;age&quot; : 30,
	&quot;city&quot;: &quot;Ho Chi Minh&quot;
}&apos;&apos;&apos;

def obj = slurper.parseText(json);

log.info obj.name
log.info obj.age.toString()
log.info obj.city</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler JsonSlurper" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;store&quot;:{&quot;book&quot;:[{&quot;category&quot;:&quot;reference&quot;,&quot;author&quot;:&quot;Nigel Rees&quot;,&quot;title&quot;:&quot;Sayings of the Century&quot;,&quot;price&quot;:8.95},{&quot;category&quot;:&quot;fiction&quot;,&quot;author&quot;:&quot;Evelyn Waugh&quot;,&quot;title&quot;:&quot;Sword of Honour&quot;,&quot;price&quot;:12.99},{&quot;category&quot;:&quot;fiction&quot;,&quot;author&quot;:&quot;Herman Melville&quot;,&quot;title&quot;:&quot;Moby Dick&quot;,&quot;isbn&quot;:&quot;0-553-21311-3&quot;,&quot;price&quot;:8.99},{&quot;category&quot;:&quot;fiction&quot;,&quot;author&quot;:&quot;J. R. R. Tolkien&quot;,&quot;title&quot;:&quot;The Lord of the Rings&quot;,&quot;isbn&quot;:&quot;0-395-19395-8&quot;,&quot;price&quot;:22.99}],&quot;bicycle&quot;:{&quot;color&quot;:&quot;red&quot;,&quot;price&quot;:19.95}}}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor 1" enabled="true">
            <stringProp name="cacheKey">2245d89e-646c-49bb-a2c7-45bf141620bd</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def slurper 	= new groovy.json.JsonSlurper();
def obj 		= slurper.parseText(prev.getResponseDataAsString());

log.info &quot;Title: &quot; + obj.store.book[0].title
log.info &quot;Color: &quot; + obj.store.bicycle.color
log.info &quot;Object: &quot; + obj.store.book[1]</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor 2" enabled="true">
            <stringProp name="cacheKey">2245d89e-646c-49bb-a2c7-45bf141620bd</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def slurper 	= new groovy.json.JsonSlurper();
def obj 		= slurper.parseText(prev.getResponseDataAsString());

def getAuthorByTitle(object, title) {
	for (int i = 0; i &lt; object.store.book.size; i++) {
		if (object.store.book[i].title == title) {
			return object.store.book[i].author;
		}
	}
	return &quot;NOT_FOUND&quot;;
}

def author = getAuthorByTitle(obj, &quot;The Lord of the Rings&quot;)

log.info author</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler JsonPath" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;store&quot;:{&quot;book&quot;:[{&quot;category&quot;:&quot;reference&quot;,&quot;author&quot;:&quot;Nigel Rees&quot;,&quot;title&quot;:&quot;Sayings of the Century&quot;,&quot;price&quot;:8.95},{&quot;category&quot;:&quot;fiction&quot;,&quot;author&quot;:&quot;Evelyn Waugh&quot;,&quot;title&quot;:&quot;Sword of Honour&quot;,&quot;price&quot;:12.99},{&quot;category&quot;:&quot;fiction&quot;,&quot;author&quot;:&quot;Herman Melville&quot;,&quot;title&quot;:&quot;Moby Dick&quot;,&quot;isbn&quot;:&quot;0-553-21311-3&quot;,&quot;price&quot;:8.99},{&quot;category&quot;:&quot;fiction&quot;,&quot;author&quot;:&quot;J. R. R. Tolkien&quot;,&quot;title&quot;:&quot;The Lord of the Rings&quot;,&quot;isbn&quot;:&quot;0-395-19395-8&quot;,&quot;price&quot;:22.99}],&quot;bicycle&quot;:{&quot;color&quot;:&quot;red&quot;,&quot;price&quot;:19.95}}}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor 1" enabled="false">
            <stringProp name="cacheKey">2245d89e-646c-49bb-a2c7-45bf141620bd</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;

def json = prev.getResponseDataAsString();
def parse = JsonPath.parse(json);

//extract single value
def author1 = parse.read(&quot;\$.store.book[1].author&quot;);
log.info(&quot;author1: &quot; + author1);

//extract with condition
def title = parse.read(&quot;\$.store.book[?(@.price &lt; 10)].title&quot;);
log.info(&quot;title of the book which has price less than 10: &quot; + title);

def price = parse.read(&quot;\$.store.book[?(@.title == &apos;The Lord of the Rings&apos;)].price&quot;);
log.info(&quot;price of the book which has title &apos;The Lord of the Rings&apos;: &quot; + price);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor 2" enabled="true">
            <stringProp name="cacheKey">2245d89e-646c-49bb-a2c7-45bf141620bd</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.jayway.jsonpath.JsonPath;

def json = prev.getResponseDataAsString();
def parse = JsonPath.parse(json);

//extract single value
def author1 = parse.read(&quot;\$[&apos;store&apos;][&apos;book&apos;][1][&apos;author&apos;]&quot;);
//log.info(&quot;author1: &quot; + author1);

//extract with condition
def title = parse.read(&quot;\$[&apos;store&apos;][&apos;book&apos;][?(@.price &lt; 10)][&apos;title&apos;]&quot;);
//log.info(&quot;title of the book which has price less than 10: &quot; + title);

def price = parse.read(&quot;\$[&apos;store&apos;][&apos;book&apos;][?(@.title == &apos;The Lord of the Rings&apos;)][&apos;price&apos;]&quot;);
//log.info(&quot;price of the book which has title &apos;The Lord of the Rings&apos;: &quot; + price);

log.info(&quot;title[0]: &quot; + title[0]);
log.info(&quot;title[1]:&quot; + title[1]);
log.info(&quot;price: &quot; + price[0]);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
